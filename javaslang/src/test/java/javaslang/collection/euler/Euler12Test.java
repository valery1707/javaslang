package javaslang.collection.euler;

import javaslang.collection.Stream;
import org.junit.Test;

import static org.assertj.core.api.Assertions.assertThat;


/**
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * <p>
 * Let us list the factors of the first seven triangle numbers:
 * <ul>
 * <li>1: 1</li>
 * <li>3: 1,3</li>
 * <li>6: 1,2,3,6</li>
 * <li>10: 1,2,5,10</li>
 * <li>15: 1,3,5,15</li>
 * <li>21: 1,3,7,21</li>
 * <li>28: 1,2,4,7,14,28</li>
 * </ul>
 * <p>
 * We can see that 28 is the first triangle number to have over five divisors.
 * <p>
 * What is the value of the first triangle number to have over five hundred divisors?
 */
public class Euler12Test {

    @Test
    public void testTriangleNumbers() throws Exception {
        Stream<Long> triangle = Utils.triangle();
        assertThat(triangle.slice(0, 10).toJavaList())
                .hasSize(10)
                .containsExactly(1L, 3L, 6L, 10L, 15L, 21L, 28L, 36L, 45L, 55L);
        assertThat(triangle.get(6)).isEqualTo(28);
    }
}
